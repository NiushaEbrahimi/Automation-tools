{

  "web": {
    "folders": [
      "assets",
      "assets/css",
      "assets/js",
      "assets/images",
      "assets/fonts",
      "docs"
    ],
    "files_with_content": {
      "index.html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <title>{project_name}</title>\n  <link rel=\"stylesheet\" href=\"assets/css/style.css\" />\n</head>\n<body>\n  <h1>Welcome to {project_name}</h1>\n</body>\n</html>\n"
    },
    "git_files": {
      "README.md": "# {project_name}\n\nA static website project.\n",
      "requirements.txt": "# Frontend or tooling dependencies (e.g., for live-server)\n",
      ".gitignore":"TODO: get this"
    }
  },

  "data": {
    "folders": [
      "data/raw",
      "data/processed",
      "data/outputs",
      "notebooks",
      "scripts",
      "figures",
      "docs"
    ],
    "files_with_content": {
      "analyze.py": "import pandas as pd\n\n# Load data\ndf = pd.read_csv('data/raw/sample.csv')\nprint(df.head())\n",
      "pipeline.py": "# Data processing pipeline\n\ndef clean_data():\n    pass\n\nif __name__ == '__main__':\n    print('Running data pipeline...')\n"
    },
    "git_files": {
      "README.md": "# {project_name}\n\nData analysis project.\n\n- Raw data: `data/raw/`\n- Processed: `data/processed/`\n- Notebooks: `notebooks/`\n",
      "requirements.txt": "# Data science stack\npandas\nmatplotlib\nseaborn\njupyter\n",
      ".gitignore":"TODO: get this"
    }

  },

  "ml": {
    "folders": [
      "data/raw",
      "data/processed",
      "notebooks",
      "models",
      "src/features",
      "src/models",
      "src/utils",
      "reports",
      "tests"
    ],
    "files": [
      "train.py",
      "predict.py",
      "README.md",
      "requirements.txt"
    ],
    "optional_files": {
      "train.py": "from sklearn.ensemble import RandomForestClassifier\n\n# Mock training\nprint('Training model...')\nmodel = RandomForestClassifier()\n# Save with joblib/pickle\n",
      "predict.py": "# Load trained model and make predictions\nprint('Making predictions...')\n",
      "README.md": "# {project_name}\n\nMachine learning project.\n\nStructure:\n- `notebooks/`: EDA\n- `models/`: saved models\n- `src/`: reusable code\n",
      "requirements.txt": "# ML stack\nnumpy\npandas\nscikit-learn\njoblib\nmatplotlib\n"
    }
  },

  "flask": {
    "folders": [
      "app/models",
      "app/routes",
      "app/templates",
      "app/static/css",
      "app/static/js",
      "app/static/images",
      "app/utils",
      "migrations",
      "tests",
      "instance"
    ],
    "files": [
      "app/__init__.py",
      "run.py",
      "config.py",
      "requirements.txt",
      "README.md"
    ],
    "optional_files": {
      "app/__init__.py": "from flask import Flask\n\n\ndef create_app():\n    app = Flask(__name__)\n\n    # Register routes\n    from app.routes import main\n    app.register_blueprint(main)\n\n    return app\n",
      "run.py": "from app import create_app\n\napp = create_app()\n\nif __name__ == '__main__':\n    app.run(debug=True)\n",
      "config.py": "import os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'hard-to-guess-key'\n",
      "README.md": "# {project_name}\n\nFlask web application.\n\nRun with:\n\n```bash\npython run.py\n```\n",
      "requirements.txt": "# Flask ecosystem\nflask\nflask-sqlalchemy\nflask-migrate\nflask-wtf\n"
    }
  }
}